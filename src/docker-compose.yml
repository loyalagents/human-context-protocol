services:
  # === PUBLIC INGRESS (HTTPS) ===
  traefik:
    image: traefik:v2.10
    # Watch docker labels, don't expose services unless labeled
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # HTTP / HTTPS entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Automatic HTTPS via Let's Encrypt (HTTP-01)
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"    # only Traefik publishes host ports
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    restart: unless-stopped
    labels:
      # Redirect all plain HTTP to HTTPS
      - traefik.enable=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https

  # === INTERNAL SERVICES (no public ports) ===
  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: unless-stopped
    # Do NOT publish Mongo publicly. If you need local access, use an SSH tunnel or bind 127.0.0.1:27017:27017.
    # ports:
    #   - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_DATABASE: personal-context-router

  preference-service:
    build:
      context: .
      dockerfile: packages/preference-service/Dockerfile
    container_name: preference-service
    restart: unless-stopped
    # Internal only; gateway calls http://preference-service:3001
    expose:
      - "3001"
      - "3002"
    command: npm run start:prod --workspace=@personal-context-router/preference-service
    environment:
      - PORT=3001
      - MICROSERVICE_PORT=3002
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/personal-context-router
    depends_on:
      - mongodb

  user-service:
    build:
      context: .
      dockerfile: packages/user-service/Dockerfile
    container_name: user-service
    restart: unless-stopped
    # Internal only; gateway calls http://user-service:3015 (or 3016 for microservice)
    expose:
      - "3015"
      - "3016"
    command: npm run start:prod --workspace=@personal-context-router/user-service
    environment:
      - PORT=3015
      - MICROSERVICE_PORT=3016
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/personal-context-router
    depends_on:
      - mongodb

  # === PUBLIC VIA TRAEFIK: GATEWAY (root host) ===
  gateway:
    build:
      context: .
      dockerfile: packages/gateway/Dockerfile
    container_name: gateway
    restart: unless-stopped
    # Don't publish to host; Traefik will route TLS traffic to container:3000
    expose:
      - "3000"
    command: npm run start:prod --workspace=@personal-context-router/gateway
    environment:
      - PORT=3000
      - NODE_ENV=development
      - PREFERENCE_SERVICE_HOST=preference-service
      - PREFERENCE_SERVICE_PORT=3002
      - PREFERENCE_SERVICE_URL=http://preference-service:3001
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=3016
      - GITHUB_SERVICE_HOST=github-import-service
      - GITHUB_SERVICE_PORT=3004
      - AUTH_SERVICE_URL=http://auth-service:3004
    depends_on:
      - preference-service
      - user-service
      - github-import-service
      - auth-service
    labels:
      - traefik.enable=true
      # Serve the gateway on https://demo.hcp.loyalagents.org/
      - traefik.http.routers.gateway.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.gateway.entrypoints=websecure
      - traefik.http.routers.gateway.tls.certresolver=le
      - traefik.http.routers.gateway.priority=50
      - traefik.http.services.gateway.loadbalancer.server.port=3000

  auth-service:
    build:
      context: .
      dockerfile: packages/auth-service/Dockerfile
    container_name: auth-service
    restart: unless-stopped
    expose:
      - "3004"
    command: npm start --workspace=@personal-context-router/auth-service
    environment:
      - PORT=3004
      - NODE_ENV=development
      - AUTH_USERNAME=${AUTH_USERNAME:-admin}
      - AUTH_PASSWORD=${AUTH_PASSWORD:-password123}

  # === PUBLIC VIA TRAEFIK: MCP (path /mcp) ===
  mcp-gateway:
    build:
      context: .
      dockerfile: packages/mcp-gateway/Dockerfile
    container_name: mcp-gateway
    restart: unless-stopped
    # Exposed via Traefik at /mcp path
    expose:
      - "3005"
    command: npm run start --workspace=@personal-context-router/mcp-gateway
    environment:
      - PORT=3005
      - NODE_ENV=development
      - MCP_SERVICE_URL=http://mcp-service:3003
    depends_on:
      - mcp-service
    labels:
      - traefik.enable=true
      # Route /mcp traffic to mcp-gateway
      - traefik.http.routers.mcp.rule=Host(`${DOMAIN}`) && PathPrefix(`/mcp`)
      - traefik.http.routers.mcp.entrypoints=websecure
      - traefik.http.routers.mcp.tls.certresolver=le
      - traefik.http.routers.mcp.priority=100
      - traefik.http.services.mcp.loadbalancer.server.port=3005

  mcp-service:
    build:
      context: .
      dockerfile: packages/mcp-service/Dockerfile
    container_name: mcp-service
    restart: unless-stopped
    # Internal only - accessed via mcp-gateway
    expose:
      - "3003"
    command: npm run start --workspace=@personal-context-router/mcp-service
    environment:
      - PORT=3003
      - NODE_ENV=development
      - GATEWAY_URL=http://gateway:3000
    depends_on:
      - gateway

  github-import-service:
    build:
      context: .
      dockerfile: packages/github-import-service/Dockerfile
    container_name: github-import-service
    restart: unless-stopped
    # Internal only
    command: npm run start:prod --workspace=@personal-context-router/github-import-service
    environment:
      - PORT=3004
      - NODE_ENV=development
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    depends_on:
      - mongodb

volumes:
  mongodb_data:

networks:
  default:
    name: personal-context-router
